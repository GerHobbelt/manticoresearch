workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_TITLE != $DOCS_AUTOCOMMIT_TITLE
    - if: $CI_COMMIT_BRANCH =~ /^manticore-.*$/ && $CI_COMMIT_TITLE != $DOCS_AUTOCOMMIT_TITLE
    - if: $TEST
    - if: $WHAT

# to skip ci add [ci skip] or [skip ci] in commit message in any capitalization,
# or add param when pushing, as: git push -o ci.skip ...

variables:
  DOCS_AUTOCOMMIT_TITLE: 'Docs_examples_update'
  DOCS_EXAMPLES_FILEPATH: 'build/test/examples.txt'
  VERBOSE: 1

stages:
  - mirroring
  - routines
  - ubertests
  - publish
  - hooks

# ==================== Mirror repo to github (only 'master' branch) ======================

job_mirror:
  stage: mirroring
  needs: [ ]
  rules:
    - if: $TEST==null && $CI_COMMIT_BRANCH == "master"
    - if: $TEST==null && $CI_COMMIT_BRANCH =~ /^manticore-.*$/
  tags:
    - dev-host
  script:
    - rm -fr gitlab_github_sync
    - git clone git@gitlab.com:manticoresearch/dev.git gitlab_github_sync
    - cd gitlab_github_sync
    - git checkout $CI_COMMIT_BRANCH
    - git remote add github git@github.com:manticoresoftware/manticoresearch.git
    - git fetch github
    - git push -u github $CI_COMMIT_BRANCH
  cache: {}

# ==================== .helper to work with documentation ======================
.docs:
  tags:
    - docker
    - privileged
  image: registry.gitlab.com/manticoresearch/doc/autodeploy:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH =~ /^manticore-.*$/
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    RELEASE_FILENAME: latest_release_version
    DOCS_ERRORS_DIR: build/docs/
  services:
    - docker:18.09.7-dind
  before_script:
    - export COMMIT_DIR="manual"
    - export DEPLOY_TARGET="k8s"
  script:
    - sh /Deploy/autoupdate.sh $DEPLOY_TARGET $COMMIT_DIR $DOCS_ERRORS_DIR
  artifacts:
    when: always
    paths:
      - $DOCS_ERRORS_DIR
  cache: { }

# ==================== Deploy documentation ======================

docs_deploy:
  extends: [ .docs ]
  stage: routines
  needs: [ ]

# ==================== .helper build ======================

.build:
  stage: routines
  interruptible: true
  needs: [ ]
  tags:
    - docker
  image: registry.gitlab.com/manticoresearch/dev/external_toolchain:clang15_cmake3243
  variables:
    CACHEB: "../cache"
    DIAGNOSTIC: 1 # let's set it by default forever
    NO_TESTS: 1
    CTEST_CMAKE_GENERATOR: Ninja
    CTEST_CONFIGURATION_TYPE: RelWithDebInfo # most common default
    DISTR: bionic # our default build for tests
    arch: x86_64
    boost: boost_nov22
    sysroot: roots_nov22
  script:
    - ctest -VV -S misc/ctest/gltest.cmake --no-compress-output
  after_script:
    - cd build && mkdir xml
    - cp -r Testing/2*/*.xml xml
  cache:
    paths:
      - cache
    key: bionic_test
  artifacts:
    when: on_success
    expire_in: 12 hrs
    paths:
      - build/xml
      - build/CMakeFiles/CMake*.log
      - build/api/libsphinxclient/testcli
      - build/src/indexer
      - build/src/indextool
      - build/src/searchd
      - build/src/tests
      - build/src/gtests/gmanticoretest
      - build/config/*.c
      - build/config/*.h
      - build/**/*.gcno

# ==================== .helper testing ======================

.tests:
  stage: ubertests
  needs: [ ]
  tags:
    - specdocker
  image: registry.gitlab.com/manticoresearch/dev/ubertests_public:3201
  variables:
    DIAGNOSTIC: 1 # let's set it by default forever
    CACHEB: "../cache"
  script:
    - bash /root/aot.sh
    - ctest -V -S misc/ctest/gltest.cmake --no-compress-output
  after_script:
    - cd build
    - cp -r Testing/2*/Test.xml .
    - xsltproc -o junit_tests.xml ../misc/junit/ctest2junit.xsl Test.xml
  cache:
    key: bionic_test
    paths:
      - cache
  artifacts:
    expire_in: 12 hrs
    when: always
    reports:
      junit: build/junit_tests.xml
    paths:
      - build/junit_tests.xml
      - build/test/test_*/report.txt
      - build/test/error*.txt
      - build/test/searchd.log
      - $DOCS_EXAMPLES_FILEPATH
  retry: 1


# ==================== Simple build, then test ======================

simple_build:
  extends: [ .build ]
  rules:
    - if: $TEST==null && $CI_COMMIT_TITLE !~ /^nocilinux .*$/i && ( $WHAT=='$WHAT' || $WHAT==null )
    - if: $TEST =~ /simple/ && ( $WHAT=='$WHAT' || $WHAT==null )
  variables:
    CTEST_CMAKE_GENERATOR: "Unix Makefiles" # as Ninja fails with coverage
    CTEST_CONFIGURATION_TYPE: "Debug"
    WITH_COVERAGE: 1

simple_tests:
  extends: [ .tests ]
  needs: [ simple_build ]
  rules:
    - if: $TEST==null && $CI_COMMIT_TITLE !~ /^nocilinux .*$/i && ( $WHAT=='$WHAT' || $WHAT==null )
    - if: $TEST =~ /simple/ && ( $WHAT=='$WHAT' || $WHAT==null )
  variables:
    CTEST_CONFIGURATION_TYPE: "Debug"
    WITH_COVERAGE: 1
    NO_BUILD: 1

# ==================== Release build, then test ======================

release_build:
  extends: [ .build ]
  rules:
    - if: $TEST==null && $CI_COMMIT_TITLE !~ /^nocilinux .*$/i && ( $WHAT=='$WHAT' || $WHAT==null )
    - if: $TEST =~ /release/ && ( $WHAT=='$WHAT' || $WHAT==null )
  variables:
    CMAKE_INTERPROCEDURAL_OPTIMIZATION: 1

release_tests:
  extends: [ .tests ]
  needs: [ release_build ]
  rules:
    - if: $TEST==null && $CI_COMMIT_TITLE !~ /^nocilinux .*$/i && ( $WHAT=='$WHAT' || $WHAT==null )
    - if: $TEST =~ /simple/ && ( $WHAT=='$WHAT' || $WHAT==null )
  variables:
    CTEST_CONFIGURATION_TYPE: "RelWithDebInfo"
    NO_BUILD: 1

# ==================== Windows build, then test ======================

win_build:
  extends: [ .build ]
  rules:
    - if: $TEST==null && $CI_COMMIT_TITLE !~ /^nociwindows .*$/i && ( $WHAT=='$WHAT' || $WHAT==null )
    - if: $TEST =~ /windows/ && ( $WHAT=='$WHAT' || $WHAT==null )
  variables:
    DISTR: windows
    arch: x64
    CTEST_CMAKE_GENERATOR: "Ninja Multi-Config"
    CTEST_CONFIGURATION_TYPE: Debug
  artifacts:
    paths:
      - build/xml
      - build/src/$CTEST_CONFIGURATION_TYPE/indexer.exe
      - build/src/$CTEST_CONFIGURATION_TYPE/searchd.exe
      - build/src/$CTEST_CONFIGURATION_TYPE/tests.exe
      - build/src/gtests/$CTEST_CONFIGURATION_TYPE/gmanticoretest.exe
      - build/usr
# Commented out usually need, but not on our dev where everything is installed into system
#      - build/src/$CTEST_CONFIGURATION_TYPE/*.dll
#      - build/src/gtests/$CTEST_CONFIGURATION_TYPE/*.dll
  cache:
    key: win_test

win_tests:
  stage: ubertests
  needs: [ win_build ]
  rules:
    - if: $TEST==null && $CI_COMMIT_TITLE !~ /^nociwindows .*$/i && ( $WHAT=='$WHAT' || $WHAT==null )
    - if: $TEST =~ /windows/ && ( $WHAT=='$WHAT' || $WHAT==null )
  tags:
    - windev19
  variables:
    LIBS_BUNDLE: "x:/bundle"
    CACHEB: "x:/cache"
    BOOST_ROOT: "x:/boost_1_75_0"
    CTEST_CMAKE_GENERATOR: "Visual Studio 16 2019"
    CTEST_CONFIGURATION_TYPE: Debug
    NO_BUILD: 1
  script:
    - 'net use x: \\\\VBOXSRV\\shared'
    - ctest -V -S misc/ctest/gltest.cmake --no-compress-output
  after_script:
    - cd build
    - cp -r Testing/2*/*.xml xml
  artifacts:
    expire_in: 12 hrs
    when: always
    paths:
      - build/xml
      - build/test/test_*/report.txt
      - build/test/error*.txt
      - build/test/searchd.log
  cache: { }


# ==================== Just build FreeBSD 13 ======================

build_bsd:
  extends: [ .build ]
  rules:
    - if: $TEST==null && $CI_COMMIT_TITLE !~ /^nocifreebsd .*$/i && ( $WHAT=='$WHAT' || $WHAT==null )
    - if: $TEST =~ /freebsd/ && ( $WHAT=='$WHAT' || $WHAT==null )
  variables:
    DISTR: freebsd13
    boost: none
  script:
    - mkdir build && cd build
    - ctest -VV -S ../misc/ctest/justbuild.cmake -DCTEST_SOURCE_DIRECTORY=.. --no-compress-output
  cache:
    key: $DISTR$arch
  retry: 1

# ==================== Publish (push) pipeline results ======================

# build and upload on regular commits
convert_win_junit:
  stage: publish
  rules:
    - if: ( $WHAT=='$WHAT' || $WHAT==null )
      when: always
  tags:
    - docker
  image: registry.gitlab.com/manticoresearch/dev/ubertests_public:3201
  needs:
    - win_tests
  variables:
    GIT_STRATEGY: fetch
  script:
    - xsltproc -o build/junit_tests.xml misc/junit/ctest2junit.xsl build/xml/Test.xml
  artifacts:
    paths:
      - build/junit_tests.xml
    reports:
      junit: build/junit_tests.xml
  cache: {}

# ==================== Check documentation examples ======================

check_docs_examples:
  extends: [ .docs ]
  stage: publish
  rules:
    - !reference [ .docs, rules ]
    - changes:
      - "test/**/*"
      - "manual/**/*.md"
      when: always
  needs:
    - release_tests

# ==================== Run secondary pipeline ======================

deploy_hook:
  stage: hooks
  variables:
    WHAT: $WHAT
    REPO_NAME: $REPO_NAME
  rules:
    - if: $CI_COMMIT_TITLE !~ /^noci .*$/i
      when: on_success
  trigger:
    include: dist/gitlab-release.yml
  needs:
    - job: simple_tests
      artifacts: false
    - job: win_tests
      artifacts: false
    - job: release_tests
      artifacts: false

# ==================== Manually redirect to our site ======================

.pages:
  stage: routines
  needs: [ ]
  rules:
    - when: manual
      allow_failure: true
  tags:
    - docker
  variables:
    GIT_STRATEGY: none
    REDIR_URL: "https://manual.manticoresearch.com/dev/"
  script:
    - mkdir .public
    - cd .public
    - echo "<!DOCTYPE html><html><head><meta http-equiv='refresh' content = '0; url = $REDIR_URL' /></head></html>" >> index.html
    - cd -
    - mv .public public
  artifacts:
    paths:
      - public
  cache: { }
