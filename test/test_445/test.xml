<?xml version="1.0" encoding="utf-8"?>
<test>
	<name>select upper/lower</name>
	<requires><sphinxql_keep_null/></requires>

	<config>
		indexer
		{
		mem_limit = 16M
		}

		searchd
		{
		<searchd_settings/>
		thread_stack = 256K
		collation_libc_locale = en_US.utf8
		}


		source test_json
		{
		type			= mysql
		<sql_settings/>
		sql_query		= select * from json_src_table
		sql_attr_uint	= gid
		sql_attr_json	= j
		}

		index test_json
		{
		source			= test_json
		path			= <data_path/>/test_json
		}

		source test_json_string
		{
		type			= mysql
		<sql_settings/>
		sql_query		= select * from json_string_table
		sql_attr_uint	= gid
		sql_attr_json	= j
		}

		index test_json_string
		{
		source			= test_json_string
		path			= <data_path/>/test_json_string
		}

		index rt
		{
		type			= rt
		path			= <data_path/>/rt
		rt_attr_uint	= gid
		rt_field		= title
		rt_attr_json	= j
		}

		index test1_loc
		{
		type = distributed
		local = test_json
		}

		index test1_dist
		{
		type = distributed
		agent = <my_address/>:test_json
		}

		source strings
		{
		type = mysql
		<sql_settings/>
		sql_query = SELECT *, 'dummy' FROM string_table
		sql_attr_string = string_value
		}

		index strings
		{
		source	= strings
		path	= <data_path/>/strings
		}

	</config>

	<db_create>
		CREATE TABLE json_src_table (
		`id` int(11) NOT NULL AUTO_INCREMENT,
		`gid` int(11) NOT NULL,
		`title` varchar(255) NOT NULL,
		`j` varchar(8192) NOT NULL,
		PRIMARY KEY (`id`)
		);
	</db_create>

	<db_create>
		CREATE TABLE json_string_table (
		`id` int(11) NOT NULL AUTO_INCREMENT,
		`gid` int(11) NOT NULL,
		`title` varchar(255) NOT NULL,
		`j` varchar(8192) NOT NULL,
		PRIMARY KEY (`id`)
		);
	</db_create>


	<db_create>
		CREATE TABLE string_table
		(
		id INT NOT NULL,
		string_value VARCHAR(255) NOT NULL
		);
	</db_create>

	<db_drop>DROP TABLE IF EXISTS json_src_table;</db_drop>
	<db_drop>DROP TABLE IF EXISTS json_string_table;</db_drop>
	<db_drop>DROP TABLE IF EXISTS string_table;</db_drop>

	<db_insert>
		INSERT INTO json_src_table VALUES
		(1,1,'test one','{"name":"Alice","uid":123, "lon":-0.08, "lat":0.93, "coord":"-0.08 0.93", "pct":12.4, "sq":9, "poly":"1,2,3,4,5,6.0", "points":[1,2,3,4,5,6.0]}'),
		(2,1,'test two','{"name":"Bob","uid":234,"gid":12, "lon":-0.0799989, "lat":0.891975, "coord":"-0.079999 0.891975", "pct":-103.7, "sq":16, "poly":"1,-2,1,2,-5,6", "points":[1,-2,1,2,-5,6]}'),
		(3,2,'another doc','{"name":"CHARLIE","uid":345, "lon":-0.0721455, "lat":0.926761, "coord":"-0.072146 0.926761", "pct":4.1, "sq":225, "poly":"-1,2,12,4,5,6", "points":[-1,2,12,4,5,6]}')
	</db_insert>

	<db_insert>
		INSERT INTO json_string_table VALUES
		(1,1,'test one','{"name":"Alice","uid":123, "jobs":["aaa", "bbb", "ccc"]}'),
		(2,1,'test two','{"name":"Bob","uid":234,"gid":12, "jobs":["aaa", "bbb", "ccc"]}')
	</db_insert>


	<db_insert>
		INSERT INTO string_table VALUES
		(1, 'asdf'),
		(2, 'ASDF'),
		(3, 'qwer'),
		(4, '')
	</db_insert>



	<queries><sphinxql>


		<!-- upper()  -->
		select id, upper('abcdefghijk') as res from test_json;

		<!-- lower()  -->
		select id, lower('ABCJNSJNJN') as res from test_json;


		<!-- upper() and lower() from rt -->
		INSERT INTO rt (id, gid, title, j) VALUES
		(1,2,'test one','{"name":"alice", "job":"DEVLEOPER",}'),
		(2,3,'test two','{"name":"bob", "job":"TESTER",}'),
		(3,4,'another doc','{"name":"charlie","job":"PROFESSOR",}');

		select * from rt;

		select id, upper('hello12323 world') as res from rt;
		select id, upper('aaa..jjdjwew.-192933' ) as res from rt;
		select id, lower('HELLO123423 world') as res from rt;
		select id, lower('AAADJD.jSBDBSBD.-192933' ) as res from rt;


		<!-- upper() and lower() from test1_dist -->
		select gid, * from test1_dist;

		select id, upper('aaa..jjdjwew .-192933') as res from test1_dist;
		select id, lower('AAA..JDHJDHIWEH .-192933') as res from test1_dist;

		<!-- regression concat from missed json field -->
		select id, concat('hello', ' ', 'world') as v0, upper(v0) as v from rt;
		select id, concat('HELLO', ' ', 'WORLD') as v0, lower(v0) as v from rt;

		select id, upper(abcdefghijk) as res from test_json;
		select id, upper('abcdefghijk','cde') as res from test_json;
		select id, lower(SDMSJDNJSAS) as res from test_json;
		select id, lower('ABCDSNDNSW','SDNSDN') as res from test_json;

		<!-- test upper and lower function for JSON attributes -->
		select * from test1_loc;

		select upper(j.name) as name from test1_loc;
		select upper(j.name) as name, geodist(substring_index(j.coord,' ',-1), substring_index(j.coord,' ',1), 0.93, -0.08 ) from test1_loc;
		select lower(j.name) as job from test1_loc;
		select lower(j.name) as job, geodist(substring_index(j.coord,' ',-1), substring_index(j.coord,' ',1), 0.93, -0.08 ) from test1_loc;

		<!-- test upper and lower function for expression that produces string like `concat string attributes` -->
		select id, substring_index('aaa.bbb.ccc.ddd', '.', 1) as res, upper(res) as res1 from test_json;
		select id, concat('aaa.bbb.ccc.ddd', '.','eee.fff') as res, upper(res) as res1 from test_json;
		select id, substring_index('AAA.BBB.CCCC', '.', 1) as res, lower(res) as res1 from test_json;
		select id, concat('AAAA.BBBB.CCCsae', '.','eee.fff') as res, lower(res) as res1 from test_json;

		<!-- test upper and lower functions for string attributes -->
		select * from strings;

		select id, string_value, upper(string_value) from strings;
		select id, string_value, lower(string_value) from strings;

		<!-- test upper and lower functions for json attribute expression-->
		select * from test_json_string;

		select id, j.jobs, upper(j.jobs[1]) from test_json_string;
		select id, j.jobs, lower(j.jobs[1]) from test_json_string;

		<!-- num conversion with upper/lower -->
		SELECT double (upper ('1.2e3'));
		SELECT integer (lower ('12345'));
      
        <!-- upper and lower cases of utf8 chars -->
<sphinxql>select id, upper('abc') as res from test_json;</sphinxql>
<sphinxql>select upper('abc');</sphinxql>
<sphinxql>select id, upper('абв') as res from test_json;</sphinxql>
<sphinxql>select upper('абв');</sphinxql>
<sphinxql>select id, upper('öö') as res from test_json;</sphinxql>
<sphinxql>select upper('öö');</sphinxql>
<sphinxql>select id, upper('Straße') as res from test_json;</sphinxql>
<sphinxql>select upper('Straße');</sphinxql>

<sphinxql>select id, lower('ABC') as res from test_json;</sphinxql>
<sphinxql>select lower('ABC');</sphinxql>
<sphinxql>select id, lower('АБВ') as res from test_json;</sphinxql>
<sphinxql>select lower('АБВ');</sphinxql>
<sphinxql>select id, lower('ÖÖ') as res from test_json;</sphinxql>
<sphinxql>select lower('ÖÖ');</sphinxql>
<sphinxql>select id, lower('STRAßE') as res from test_json;</sphinxql>
<sphinxql>select lower('STRAßE');</sphinxql>

	</sphinxql></queries>

</test>
