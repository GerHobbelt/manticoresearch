<?xml version="1.0" encoding="utf-8"?>
<test>

<name>percolate query</name>
	<requires>
		<force-rt/>
	</requires>
<skip_indexer/>

<config>

searchd
{
	<searchd_settings/>
}

index pq
{
	type = percolate
	path			= <data_path/>/pq
	min_infix_len	= 2
	rt_field = title
}

index pq_filter
{
	type = percolate
	path = <data_path/>/pq_filter
	rt_field = title
	rt_attr_uint = gid
}

index pq_filter1
{
	type = percolate
	path = <data_path/>/pq_filter1
	rt_field = title
	rt_attr_json = j
	rt_attr_string = s
}

index pq_wild1
{
	type = percolate
	path			= <data_path/>/pq_wild1
	min_prefix_len	= 1
	rt_field = title
}

index pq_mva
{
	type = percolate
	path			= <data_path/>/pq_mva
	rt_field = title
	rt_attr_uint = gid
	rt_attr_multi = mva1
	rt_attr_multi = mva2
	rt_attr_multi = mva3
}

index pq_stem
{
	type = percolate
	path = <data_path/>/pq_stem
	rt_field = title
	rt_attr_uint = gid
	
    index_exact_words   = 1          
    morphology      = stem_ru    	
}


index pq_utf
{
	type = percolate
	path = <data_path/>/pq_utf
	rt_field = title
	rt_attr_uint = gid

	min_infix_len = 2
}

index wild_exact_rt
{
	type = rt
	path = <data_path/>/wild_exact_rt
	rt_field = title
	rt_attr_uint = gid

	min_infix_len = 2
    morphology = stem_en
}

index wild_exact_pq
{
	type = percolate
	path = <data_path/>/wild_exact_pq
	rt_field = title
	rt_attr_uint = gid

	min_infix_len = 2
    morphology = stem_en
}

index pq_small
{
	type = percolate
	path			= <data_path/>/pq_small

	rt_field = title
	charset_table = a
}
</config>


<queries><sphinxql>
INSERT INTO pq (query) VALUES ( 'test' );
INSERT INTO pq (query) VALUES ( 'test | cat' );
INSERT INTO pq (query) VALUES ( 'tes*' );
INSERT INTO pq (query) VALUES ( '*ik*' );
CALL PQ ('pq', 'test 1', 1 as docs, 0 as docs_json );
CALL PQ ('pq', 'cat like me', 1 as docs, 0 as docs_json );
CALL PQ ('pq', ('test of many fields goes on', 'many fields join together for testik'), 1 as docs, 0 as docs_json );

<!-- json documents -->
CALL PQ ('pq', ('{"title":"testik goes on"}', '{"title":"cat but not dog"}'), 1 as docs, 1 as docs_json );

<!-- query with position terms -->
INSERT INTO pq (query) VALUES ( '"butter is"' );
CALL PQ ('pq', ('{"title":"butter is good as"}', '{"title":"is butter"}'), 1 as docs, 1 as docs_json );

<!-- query management by tags -->
INSERT INTO pq (query, tags) VALUES ( 'test 1', 'base3 postid postid_11' );
INSERT INTO pq (query, tags) VALUES ( 'test 2', 'base3 postid postid_12' );
INSERT INTO pq (query, tags) VALUES ( 'test 3', 'base3 city' );
SELECT * FROM pq where tags any ('base3');
DELETE FROM pq where tags any ('postid');
SELECT * FROM pq where tags any ('base3');
DELETE FROM pq where tags any ('base3');
SELECT * FROM pq where tags any ('base3');

<!-- filters -->
INSERT INTO pq_filter (query, filters) VALUES ( 'filter test', 'gid &gt;= 10' );
INSERT INTO pq_filter (query, filters) VALUES ( 'filter test', 'gid &gt;= 10 OR gid &lt;= 3' );
SELECT * FROM pq_filter;
CALL PQ ('pq_filter', ('{"title":"filter test doc1", "gid":2 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as docs_json );

<!-- filter id -->
INSERT INTO pq (query, tags) VALUES ( 'test 1', 'base3 postid postid_11' );
INSERT INTO pq (query, tags) VALUES ( 'test 2', 'base3 postid postid_12' );
INSERT INTO pq (query, tags) VALUES ( 'test 3', 'base3 city' );
SELECT * FROM pq;
SELECT * FROM pq WHERE id IN (1677721600001,1677721600004,1677721600005);
SELECT * FROM pq WHERE id &lt; 1677721600002;
SELECT * FROM pq WHERE id &gt;= 1677721600004;
SELECT * FROM pq WHERE id &gt;= 1677721600004 and tags any ('postid');

<!-- query option -->
CALL PQ ('pq_filter', ('{"title":"filter test doc1", "gid":2 }', '{"title":"filter test doc2", "gid":13}'), 1 as docs, 1 as docs_json, 1 as query );
CALL PQ ('pq', ('{"title":"testik goes on"}', '{"title":"cat but not dog"}'), 1 as docs, 1 as docs_json, 1 as query );

<!-- query uid -->
SELECT * FROM pq;
INSERT INTO pq (query, tags) VALUES ( 'test 1', 'id_x1 id' );
INSERT INTO pq (query, tags) VALUES ( 'test 2', 'id_x2 id' );
SELECT * FROM pq;
DELETE FROM pq where tags any ('postid');
SELECT * FROM pq;
INSERT INTO pq (query, tags) VALUES ( 'test 3', 'id_x3 id' );
SELECT * FROM pq;
INSERT INTO pq (query, tags, id) VALUES ( 'test 4', 'id_x4 id', 1677721600013 );
SELECT * FROM pq;
REPLACE INTO pq (query, tags, id) VALUES ( 'test 4', 'id_x4 id', 1677721600013 );
SELECT * FROM pq;
DELETE FROM pq where id=1677721600016;
DELETE FROM pq where id=1677721600014;
SELECT * FROM pq;
INSERT INTO pq (query, tags, id) VALUES ( 'test 11', 'id_x11 id', 1677721600016 );
SELECT * FROM pq;
DELETE FROM pq where tags any ('id');
SELECT * FROM pq;

<!-- list tags -->
INSERT INTO pq (query, tags) VALUES ( 'test 1', 'base3 postid postid_11' );
INSERT INTO pq (query, tags) VALUES ( 'test 2', 'base3 postid postid_12' );
INSERT INTO pq (query, tags) VALUES ( 'test 3', 'base3 city' );
SELECT * FROM pq WHERE id &gt;= 1677721600004 and tags any ('postid');
SELECT * FROM pq WHERE id &gt;= 1677721600004 and tags not any ('postid');
SELECT * FROM pq WHERE id &gt;= 1677721600004 and tags!='' and tags not any ('postid');
SELECT * FROM pq WHERE tags any ('postid');
SELECT * FROM pq WHERE tags not any ('postid');
SELECT * FROM pq WHERE tags any ('city');
SELECT * FROM pq WHERE tags not any ('city');

<!-- JSON field id to document uid -->
INSERT INTO pq (query) VALUES ( 'butter is' );
INSERT INTO pq (query) VALUES ( 'butter was' );
INSERT INTO pq (query) VALUES ( 'filter test' );
CALL PQ ('pq', ('{"title":"butter is good as", "id":3}', '{"title":"was butter", "id":4}', '{"title":"sas was butter", "id":5}', '{"title":"bas was butter", "id":10}', '{"title":"butter is good as", "id":11}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id );
CALL PQ ('pq', ('{"title":"filter test | is", "gid":2, "id":3 }', '{"title":"filter test | was", "gid":13, "id":10}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id );

<!-- query filter on JSON and strings -->
INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 'j.gid &gt;= 3' );
INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 'j.gid &lt; 13' );
INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 's = \'more\'' );
INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 's != \'more\'' );
INSERT INTO pq_filter1 (query, filters) VALUES ( 'filter test', 's = \'more\' OR j.gid &gt; 10' );
CALL PQ ('pq_filter1', ('{"title":"filter test coming", "j":{"gid":3, "viw":3}, "s":"more", "x":"less", "id":1}', '{"title":"filter test passed", "j":{"gid":1, "viw":1}, "s":"no more", "x":"less too", "id":2}', '{"title":"filter test was", "j":{"gid":12, "viw":12}, "s":"more", "x":"less", "id":3}', '{"title":"filter test coming", "j":{"gid":13, "viw":13}, "s":"more or less", "x":"less too", "id":4}', '{"title":"filter test coming", "j":{"gid":11, "viw":11}, "s":"more", "x":"less", "id":5}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id );

<!-- JSON duplicates or groups at id field-->
INSERT INTO pq (query) VALUES ( 'butter' );
CALL PQ ('pq', ('{"title":"butter is good as", "group_id":3}', '{"title":"was butter", "group_id":4}', '{"title":"sas was butter", "group_id":3}', '{"title":"bas was butter", "group_id":3}', '{"title":"butter is good as", "group_id":5}'), 1 as docs, 1 as docs_json, 1 as query, 'group_id' as docs_id );

<!-- negative id field-->
CALL PQ ('pq', ('{"title":"butter is good as", "group_id":3}', '{"title":"was butter", "group_id":11}', '{"title":"sas was butter", "group_id":-2}', '{"title":"bas was butter", "group_id":-13}', '{"title":"butter is good as", "group_id":5}'), 1 as docs, 1 as docs_json, 1 as query, 'group_id' as docs_id );

<!-- expression filter -->
insert into pq_filter1 (query,filters) values('orange', 'j.price - 1 > 3');
insert into pq_filter1 (query,filters) values('orange', 'j.price - 1 > 3 OR j.tag IS NOT null');
insert into pq_filter1 (query,filters) values('orange', 'j.price - 1 > 3 OR any (x=\'test\' for x in j.tag)');
CALL PQ ('pq_filter1', ('{"title":"orange", "j":{ "price":5 } }', '{"title":"orange", "j":{ "price":3 } }', '{"title":"orange", "j":{ "tag":5 } }', '{"title":"orange", "j":{ "tag":["test"] } }' ), 1 as docs, 1 as docs_json, 1 as query );

<!-- wildcard vs batch of docs -->
INSERT INTO pq_wild1 (query) VALUES ( 'a* b*' );
CALL PQ ('pq_wild1', ('{"title":"abc"}','{"title":"acc"}','{"title":"be ce acc"}','{"title":"abc"}'), 1 as docs, 1 as docs_json, 1 as query );

<!-- MVA filter -->
insert into pq_mva (query, tags) values('orange', 'q1');
CALL PQ ('pq_mva', 'orange', 1 as docs, 0 as docs_json, 1 as query );
insert into pq_mva (query, filters, tags) values('orange', 'mva1 in (1, 9, 13)', 'q2');
CALL PQ ('pq_mva', ('{"title":"orange", "mva1":[1, 12]}', '{"title":"orange", "mva2":[13], "mva1":[8]}', '{"title":"orange", "mva1":[13]}' ), 1 as docs, 1 as docs_json, 1 as query );
insert into pq_mva (query, filters, tags) values('orange', 'mva3 &lt; 13', 'q31');
insert into pq_mva (query, filters, tags) values('orange', 'all(mva3) &lt; 13', 'q32');
insert into pq_mva (query, filters, tags) values('orange', 'any(mva3) &lt; 13', 'q33');
CALL PQ ('pq_mva', ('{"title":"orange", "mva3":[1, 12]}', '{"title":"orange", "mva2":[15], "mva3":[8,8,1]}', '{"title":"orange", "mva3":[13]}', '{"title":"orange", "mva2":[15], "mva3":[8,13,1]}'), 1 as docs, 1 as docs_json, 1 as query );

<!-- full-scan queries -->
insert into pq_mva (query, filters, tags) values('', 'mva3 &lt; 13', 'q31');
insert into pq_mva (query, filters, tags) values('', 'all(mva3) &lt; 13', 'q32');
insert into pq_mva (query, filters, tags) values('', 'any(mva3) &lt; 13', 'q33');
insert into pq_mva (query, tags) values('', 'q_all');
CALL PQ ('pq_mva', ('{"title":"black", "mva3":[1, 12]}', '{"mva2":[15], "mva3":[8,8,1]}', '{"mva3":[13]}', '{"mva2":[15], "mva3":[8,13,1]}'), 1 as docs, 1 as docs_json, 1 as query );

<!-- bad filters -->
insert into pq_filter1 (query,filters) values('orange', 'test > 3');
insert into pq_filter1 (query,filters) values('orange', 'test.price > 3');
insert into pq_filter1 (query,filters) values('orange', '@weight > 3');
select * from pq_filter1;

<!-- display schema -->
describe pq;
describe pq_filter;
describe pq_filter1;
describe pq_wild1;
describe pq_mva;

<!-- display internal schema -->
describe pq table;
describe pq_filter table;
describe pq_filter1 table;
describe pq_wild1 table;
describe pq_mva table;

<!-- group by tags -->
insert into pq_mva (query, tags) values('test1', 'q33');
select id, count(*) c, tags from pq_mva group by tags;

<!-- regression stemmed terms missed -->
INSERT INTO pq_stem (query) VALUES ( 'проверка' );
INSERT INTO pq_stem (query) VALUES ( 'проверки' );
CALL PQ ('pq_stem', 'была проверка', 1 as docs, 0 as docs_json );
CALL PQ ('pq_stem', 'проверки делом', 1 as docs, 0 as docs_json );

<!-- regression wildcard match of utf8 chars at docs and queries -->
INSERT INTO pq_utf (query) VALUES ( 'про*' );
INSERT INTO pq_utf (query) VALUES ( 'проверка' );
CALL PQ ('pq_utf', 'была проверка', 1 as docs, 0 as docs_json );
CALL PQ ('pq_utf', 'проверка делом', 1 as docs, 0 as docs_json );

<!-- query filter on JSON with boolean conditions -->
INSERT INTO pq_filter1 (query, filters) VALUES ( 'test', 'j.state.on = TRUE' );
INSERT INTO pq_filter1 (query, filters) VALUES ( 'test', 'j.state.on = FALSE' );
INSERT INTO pq_filter1 (query, filters) VALUES ( 'test', 'j.state.on != TRUE and j.state.alive = TRUE' );
CALL PQ ('pq_filter1', ('{"title":"test", "j":{"state":{"on": TRUE, "alive":1}, "viw":3}, "id":1}', '{"title":"test", "j":{"state":{"on": 0, "alive":0}, "viw":3}, "id":2}', '{"title":"test", "j":{"state":{"on": FALSE, "alive":TRUE}, "viw":3}, "id":3}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id );

<!-- regression exact followed by woldcard -->
INSERT INTO wild_exact_rt (title) VALUES ( 'abc' ), ( 'abcdef' ), ( 'defabcdef' );
SELECT * from wild_exact_rt where MATCH('="*abc*"');
INSERT INTO wild_exact_pq (id, query) VALUES (1, '="*abc*"');
CALL PQ('wild_exact_pq', ('abc', 'abcdef', 'defabcdef'), 0 as docs_json, 1 as docs);

<!-- string filters -->
insert into pq_filter1(filters, id) values('j.test ="asd"',    11);
insert into pq_filter1(filters, id) values('"asd" = j.test',   12);
insert into pq_filter1(filters, id) values('j.test !="asd"',   21);
insert into pq_filter1(filters, id) values('"asd" != j.test ', 22);
CALL PQ ('pq_filter1', ('{"j":{"test":"asd"}, "id":101}', '{"j":{"test":"best"}, "id":102}', '{"j":{"gid":12}, "id":103}'), 1 as docs, 1 as docs_json, 1 as query, 'id' as docs_id );

</sphinxql>

<!-- regression max_matches default vs user set -->
<sphinxql>TRUNCATE RTINDEX pq</sphinxql>
<repeat count="2000" vars="i" init="1" inc="1">
    <sphinxql skip="1">
        INSERT INTO pq (id, query) VALUES (<i/>, 'test ops')
    </sphinxql>
</repeat>
<sphinxql>
select * from pq order by id asc limit 20, 5;
select * from pq limit 1020, 5 option max_matches=1100;
</sphinxql>

<sphinxql>
<!-- regression full-scan instead of full-text for out of charset_table chars in query -->
INSERT INTO pq_small (query) values('a'),('bc');
call pq('pq_small', 'abc', 0 as docs_json, 1 as query);
call pq('pq_small', 'bc', 0 as docs_json, 1 as query);
call pq('pq_small', 'def', 0 as docs_json, 1 as query);
</sphinxql>

<sphinxql>
<!-- regression exact mdifier breaks matching -->
INSERT INTO pq_stem (query) VALUES ( '=проверка' );
CALL PQ ('pq_stem', 'проверки', 1 as docs, 0 as docs_json );
CALL PQ ('pq_stem', 'проверка', 1 as docs, 0 as docs_json );
</sphinxql>

</queries>

</test>
